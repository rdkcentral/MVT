From 35ade7cfedb00f12eef15094a6c44e6e581cf43b Mon Sep 17 00:00:00 2001
From: pradeep-raveendranpillai-infosys <ppillai.ext@libertyglobal.com>
Date: Fri, 24 Jan 2025 15:11:12 +0530
Subject: [PATCH] MVT Patch

---
 harness/compactTestList.js |   2 +-
 harness/compactTestView.js |  19 ++++--
 harness/constants.js       |   3 +-
 harness/main.js            |  52 +++++++++++++--
 harness/test.js            |  43 ++++---------
 harness/testView.js        |  65 ++++++++++++++-----
 harness/timeout.js         |   9 +++
 style.css                  | 127 +++++++++++++++++++++++++------------
 8 files changed, 217 insertions(+), 103 deletions(-)

diff --git a/harness/compactTestList.js b/harness/compactTestList.js
index 84a50d8..d0906da 100644
--- a/harness/compactTestList.js
+++ b/harness/compactTestList.js
@@ -167,7 +167,7 @@ function TestList(style) {
       currentColumn.appendChild(tr);
 
       var elems = [
-        createElement('div', null, 'test-status-none', '&nbsp;'),
+        createElement('div', null, 'test-status-empty', '&nbsp;'),
         createElement('div', null, 'cell-name', '&nbsp;')
       ];
       tr.appendChild(elems[0]);
diff --git a/harness/compactTestView.js b/harness/compactTestView.js
index 23771ce..4dc6fb0 100644
--- a/harness/compactTestView.js
+++ b/harness/compactTestView.js
@@ -1,6 +1,7 @@
 /**
  * @license
  * Copyright 2018 Google Inc. All rights reserved.
+ * Copyright 2025 Liberty Global B.V.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,6 +35,8 @@ var compactTestView = (function() {
       if (harnessConfig.controlMediaFormatSelection) {
         this.addSwitch('WebM/VP9: ', 'enablewebm');
       }
+      this.addSwitch('Check frames: ', 'checkframes');
+      this.addSwitch('Debug: ', 'debug');
 
       this.addCommand('Run All', 'run-selected', 'Run all tests in order.',
         function(e) {
@@ -42,18 +45,20 @@ var compactTestView = (function() {
         });
 
 
-      this.addLink('Links', '/links.html');
-      this.addLink('Instructions', '/instructions.html');
-      this.addLink('Changelog', 'changelog.html');
-      this.addLink('Download-Source', 'download.tar.gz');
-      this.addLink('Download-Media-files', 'https://storage.cloud.google.com/ytlr-cert.appspot.com/test-materials/YTS-media-files.tar.gz');
       if (harnessConfig.novp9) {
         this.addLink('No VP9', 'main.html');
       }
+      this.addLink('YouTube Tests', 'https://ytlr-cert.appspot.com/2021/main.html');
       this.addLink('Content Licenses', 'licenses.html');
-      this.addLink('YouTube', 'https://youtube.com/tv');
-
+      this.addLink('Media Coverage', 'coverage.html');
+      this.addLink('Test Any Player', '/anyplayer');
       this.addTestSuites(testSuiteVersions[this.testSuiteVer].testSuites);
+
+      for (var engineId in EngineVersions) {
+        var engine = EngineVersions[engineId];
+        var versions = Object.keys(engine.versions);
+        this.addSelector(engine.name + " version: ", versions, engineId, engine.defaultVersion);
+      }
     };
 
     this.addTest = function(desc) {
diff --git a/harness/constants.js b/harness/constants.js
index e0e08bf..aa140a8 100644
--- a/harness/constants.js
+++ b/harness/constants.js
@@ -1,6 +1,7 @@
 /**
  * @license
  * Copyright 2018 Google Inc. All rights reserved.
+ * Copyright 2025 Liberty Global B.V.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,4 +18,4 @@
 
 'use strict';
 
-window.testVersion = '2021';
+window.testVersion = 'MVT';
diff --git a/harness/main.js b/harness/main.js
index b0918ca..3e7973e 100644
--- a/harness/main.js
+++ b/harness/main.js
@@ -1,6 +1,7 @@
 /**
  * @license
  * Copyright 2018 Google Inc. All rights reserved.
+ * Copyright 2025 Liberty Global B.V.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,6 +29,10 @@ var loadTests = function(testType) {
       testType.substring(testType.indexOf('-') + 1, testType.lastIndexOf('-'));
     return window['PlaybackperfTest'](subgroup);
   } else {
+
+    if ('tests' in window.testSuiteDescriptions[testType]) {
+      return window.testSuiteDescriptions[testType].tests();
+    }
     testName = util.MakeCapitalName(testName) + 'Test';
     return window[testName]();
   }
@@ -42,6 +47,8 @@ var parseParam = function(param, defaultValue) {
 var parseParams = function(testSuiteConfig) {
   var config = {};
   config.testType = parseParam('test_type', testSuiteConfig.defaultTestSuite);
+  config.testnames = parseParam('testnames', '');
+  config.tests = parseParam('testnumbers');
   config.command = parseParam('command', '');
   config.timeout = Number(parseParam('timeout', TestBase.timeout));
   config.logging = !util.stringToBoolean(parseParam('disable_log', false));
@@ -51,9 +58,10 @@ var parseParams = function(testSuiteConfig) {
       parseParam('stoponfailure', false));
   config.enablewebm = util.stringToBoolean(
       parseParam('enablewebm', testSuiteConfig.enablewebm));
+  config.checkframes = util.stringToBoolean(parseParam('checkframes', false));
+  config.debug = util.stringToBoolean(parseParam('debug', false));
   config.muted = util.stringToBoolean(parseParam('muted', false));
   config.novp9 = util.stringToBoolean(parseParam('novp9', false));
-  config.tests = parseParam('tests');
   config.exclude = parseParam('exclude');
   config.testsMask = parseParam('tests_mask', '');
   config.testid = parseParam('testid', '');
@@ -85,7 +93,9 @@ var configureHarness = function(testSuiteConfig) {
 
   if (harnessConfig.testsMask) {
     harnessConfig.testsMask += '0';
-  } else if (harnessConfig.tests) {
+  } else if (harnessConfig.testnames) {
+      harnessConfig.testsMask = '';
+   } else if (harnessConfig.tests) {
     harnessConfig.tests =
         harnessConfig.tests.split(',')
             .map(function(x) {
@@ -145,7 +155,12 @@ var createLogger = function() {
       text += arguments[i].toString() + ' ';
 
     console.log(text);
-    output.innerHTML = text + '\n' + output.innerHTML;
+    var textBlock = output.innerHTML;
+    textBlock = textBlock.split('\n').slice(-50).join('\n');
+    const separator = textBlock.length === 0 ? '' : '\n';
+    output.innerHTML = textBlock + separator + text;
+    output.scrollTop = output.scrollHeight
+    return text;
   };
 };
 
@@ -153,9 +168,23 @@ window.globalRunner = null;
 
 var createRunner = function(
     testSuite, testSuiteVer, testsMask, testAllowList = [], testPlanId = '') {
+    if (harnessConfig.testnames != "") {
+      testsMask = ""
+      let testNames = harnessConfig.testnames.split(',').map((testname) => {return testname.toLowerCase()});
+      console.log(testNames);
+      for (let test in testSuite.tests) {
+        if (testNames.includes(testSuite.tests[test].prototype.name.toLowerCase())) {
+          testsMask += "1";
+      } else if (testNames.includes(testSuite.tests[test].prototype.name.split('__')[0].toLowerCase())) {
+        testsMask += "1";
+      } else {
+        testsMask += "0";
+      }
+    }
+  }
+
   var runner = new TestExecutor(
       testSuite, testsMask, testSuiteVer, testAllowList, testPlanId);
-
   // Expose the runner so outside/injected scripts can read it.
   window.globalRunner = runner;
 
@@ -195,10 +224,21 @@ var addTimestampHash = function() {
 };
 
 var loadTestsAndCreateRunner = function(testSuiteVer) {
+  const waitFor = (ms) => {
+    return new Promise((resolve, reject) => {
+      setTimeout(() => {
+        resolve()
+      }, ms)
+    })
+  }
   var testSuite = loadTests(harnessConfig.testType);
   var runner = createRunner(testSuite, testSuiteVer, harnessConfig.testsMask);
-  if (harnessConfig.command === 'run')
+  function runTest() {
     runner.startTest(0, runner.testList.length);
+  }
+  if (harnessConfig.command === 'run') {
+    waitFor(1000).then(runTest)
+  }
 };
 
 
@@ -208,7 +248,7 @@ window.startMseTest = function(testSuiteVer) {
   window.harnessConfig = parseParams(testSuiteVersion.config);
   window.harnessConfig.testSuite = testSuiteVer;
 
-  addTimestampHash();
+  //addTimestampHash();
 
   if (!testSuiteVersion.testSuites.indexOf(harnessConfig.testType) === -1) {
     alert('Cannot find test type ' + harnessConfig.testType);
diff --git a/harness/test.js b/harness/test.js
index 1719490..a22ea0d 100644
--- a/harness/test.js
+++ b/harness/test.js
@@ -1,6 +1,7 @@
 /**
  * @license
  * Copyright 2018 Google Inc. All rights reserved.
+ * Copyright 2025 Liberty Global B.V.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -110,12 +111,15 @@ window.createTest = function (name, category = '', mandatory = true, id = '',
   var t = function() {};
   t.prototype = Object.create(TestBase);
   t.prototype.name = name;
+  t.prototype.logs = "";
   t.prototype.title = title;
   t.prototype.passingCriteria = passingCriteria;
   t.prototype.instruction = instruction;
   t.prototype.id = id;
   t.prototype.desc = name;
   t.prototype.running = false;
+  t.prototype.playing = false;
+  t.prototype.executionTime = 0;
   t.prototype.outcome = TestOutcome.UNKNOWN;
   t.prototype.category = category;
   t.prototype.mandatory = mandatory;
@@ -185,8 +189,11 @@ var TestExecutor = function(
 
 TestExecutor.prototype.log = function() {
   var args = Array.prototype.slice.call(arguments, 0);
-  args.splice(0, 0, 'TestExecutor: ');
-  LOG.apply(this, args);
+  args.splice(0, 0, '[' + new Date().toISOString() + ']');
+  const text = LOG.apply(this, args);
+  if (this.testList[this.currentTestIdx] && this.testList[this.currentTestIdx].prototype.running) {
+    this.testList[this.currentTestIdx].prototype.logs += text + '\n';
+  }
 };
 
 TestExecutor.prototype.assert = function(cond, msg) {
@@ -304,12 +311,9 @@ TestExecutor.prototype.initialize = function() {
 
   this.testView.generate(this.testSuiteVer);
 
-  document.getElementById('info').innerHTML = this.info;
   this.log('Media Source and Encrypted Media Conformance Tests ' +
            '(version REVISION)');
 
-  this.longestTimeRatio = -1;
-  this.longestTest = null;
 };
 
 TestExecutor.prototype.reinitializeWithTestCaseIdAllowList = function(
@@ -354,11 +358,6 @@ TestExecutor.prototype.reinitializeWithTestCaseIdAllowList = function(
 };
 
 TestExecutor.prototype.onfinished = function() {
-  if (this.longestTest && this.longestTimeRatio > 0) {
-    this.log('Longest test is ' + this.longestTest + ', it takes ' +
-             this.longestTimeRatio + ' of its timeout.');
-  }
-
   var keepRunning = (!harnessConfig.stoponfailure ||
       this.lastResult === 'pass') && harnessConfig.loop &&
       (this.testView.anySelected() || this.numOfTestToRun === 1);
@@ -380,14 +379,6 @@ TestExecutor.prototype.onfinished = function() {
       }
     }
   }
-
-  this.log('[PLEASE VERIFY]Device Status: {HDR: ' + harnessConfig.support_hdr +
-      '}, {WebSpeech: ' + harnessConfig.support_webspeech + '}.');
-
-  if (document.URL.indexOf('appspot.com') >= 0 ||
-      document.URL.indexOf('googleapis.com') >= 0) {
-    this.sendTestReport(getTestResults());
-  }
 };
 
 TestExecutor.prototype.sendTestReport = function(results) {
@@ -430,13 +421,13 @@ TestExecutor.prototype.startNextTest = function() {
   this.currentTest = new this.testList[this.currentTestIdx];
   this.blockTestResults = false;
 
+  this.testList[this.currentTestIdx].prototype.running = true;
+
   this.log('Test ' + (this.currentTest.index + 1) + ':' +
            this.currentTest.desc + ' STARTED with timeout ' +
            this.currentTest.timeout);
   this.timeouts.setTimeout(this.timeout.bind(this), this.currentTest.timeout);
 
-  this.testList[this.currentTestIdx].prototype.running = true;
-
   this.updateStatus();
 
   this.startTime = Date.now();
@@ -583,18 +574,10 @@ TestExecutor.prototype.timeout = function() {
 };
 
 TestExecutor.prototype.teardownCurrentTest = function(isTimeout, errorMsg) {
-  if (!isTimeout) {
-    var time = Date.now() - this.startTime;
-    var ratio = time / this.currentTest.timeout;
-    if (ratio >= this.longestTimeRatio) {
-      this.longestTimeRatio = ratio;
-      this.longestTest = this.currentTest.desc;
-      this.log('New longest test ' + this.currentTest.desc +
-               ' with timeout ' + this.currentTest.timeout + ' takes ' + time);
-    }
-  }
+  this.testList[this.currentTestIdx].prototype.executionTime = Date.now() - this.startTime;
 
   this.testList[this.currentTestIdx].prototype.running = false;
+  this.testList[this.currentTestIdx].prototype.playing = false;
   this.updateStatus();
 
   this.timeouts.clearAll();
diff --git a/harness/testView.js b/harness/testView.js
index 0c0e8df..ac093c0 100644
--- a/harness/testView.js
+++ b/harness/testView.js
@@ -1,6 +1,7 @@
 /**
  * @license
  * Copyright 2018 Google Inc. All rights reserved.
+ * Copyright 2025 Liberty Global B.V.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,18 +46,14 @@ function TestView(testSuiteVer, testViewInfo) {
   var testSuites = [];
   var links = [];
 
-  this.addSelector = function(text, optionTexts, values, callback) {
+  this.addSelector = function(text, optionTexts, id = null, defaultValue = 0) {
     optionTexts = optionTexts instanceof Array ? optionTexts : [optionTexts];
-    values = values instanceof Array ? values : [values];
-
-    if (optionTexts.length !== values.length)
-      throw "text length and value length don't match!";
 
     selectors.push({
       'text': text,
       'optionTexts': optionTexts,
-      'values': values,
-      'cb': callback
+      'id': id,
+      'defaultValue': defaultValue
     })
   };
 
@@ -110,15 +107,15 @@ function TestView(testSuiteVer, testViewInfo) {
     if (this.testViewInfo) {
       heading += this.testViewInfo;
     }
-    heading += ' ' + testSuiteDescriptions[harnessConfig.testType].heading + ' (v REVISION)';
+    heading += ' ' + testSuiteDescriptions[harnessConfig.testType].heading;
     try {
       document.title = testSuiteDescriptions[harnessConfig.testType].title;
     } catch (e) {
       // Use default html title if UA can't control document.title.
     }
     document.body.appendChild(createElement('span', 'title', null, heading));
-    document.body.appendChild(createElement('span', 'info', 'h4'));
     document.body.appendChild(createElement('span', 'usage', 'h4'));
+    document.body.appendChild(createElement('span', 'profiles', 'h4'));
     document.body.appendChild(createElement('div', 'testview'));
 
     var div = document.getElementById(this.divId);
@@ -151,19 +148,55 @@ function TestView(testSuiteVer, testViewInfo) {
           var wasOff = !util.stringToBoolean(e.target.innerHTML);
           e.target.innerHTML = wasOff ? 'on' : 'off';
           harnessConfig[id] = wasOff;
+          if (id == "debug"){
+            let queryParams = new URLSearchParams(window.location.search);
+            queryParams.set("debug", harnessConfig.debug);
+            let url = `${location.origin}${location.pathname}?` + queryParams.toString();
+            function setUrl(url) {
+              location.href = url;
+            }
+            switchDiv.lastChild.onclick = setUrl(url);
+          }
         };
       })(id);
       switchDiv.lastChild.exec = switchDiv.lastChild.onclick;
     }
     for (var i = 0; i < selectors.length; ++i) {
-      switchDiv.appendChild(document.createTextNode(selectors[i].text));
-      var select = document.createElement('select');
-      for (var j = 0; j < selectors[i].optionTexts.length; ++j) {
-        select.appendChild(createOption(selectors[i].optionTexts[j],
-            selectors[i].values[j]));
+      if (harnessConfig.testType.includes(selectors[i].id)) {
+        switchDiv.appendChild(document.createTextNode(selectors[i].text));
+        var select = document.createElement('span');
+        select.id = selectors[i].id;
+        for (var j = 0; j < selectors[i].optionTexts.length; ++j) {
+          select.appendChild(createAnchor(selectors[i].optionTexts[j], selectors[i].optionTexts[j]));
+          let url = `${location.origin}?test_type=${harnessConfig.testType}`
+          url += `&engine_${selectors[i].id}=${selectors[i].optionTexts[j]}`
+          select.lastChild.setAttribute('data-href', url);
+          select.lastChild.onclick = window.navigate;
+          if (selectors[i].optionTexts[j] != selectors[i].defaultValue)
+              select.lastChild.classList.add('focusable');
+          else
+              select.lastChild.classList.add('bold');
+        }
+        switchDiv.appendChild(select);
       }
-      select.onchange = selectors[i].cb;
-      switchDiv.appendChild(select);
+    }
+
+    var profilesDiv = document.getElementById('profiles');
+    var title = createElement('span', 'profiles_select', 'bold', 'Profile: ');
+    profilesDiv.appendChild(title);
+    for (var profile in Profiles) {
+      profilesDiv.appendChild(createAnchor(profile, "profile_" + profile));
+      let url = `${location.origin}?test_type=${harnessConfig.testType}`
+      url += `&profile=${profile}`
+      if (window.ConfigString != profile) {
+        profilesDiv.lastChild.setAttribute('data-href', url);
+        profilesDiv.lastChild.onclick = window.navigate;
+        profilesDiv.lastChild.classList.add('focusable');
+        profilesDiv.lastChild.style = "font-weight: normal !important; color: #006ed4;";
+      } else {
+        profilesDiv.lastChild.classList.add('bold');
+        profilesDiv.lastChild.style = "color:green; text-decoration:underline;";
+       }
     }
 
     switchDiv.appendChild(
diff --git a/harness/timeout.js b/harness/timeout.js
index 7c373c1..1628040 100644
--- a/harness/timeout.js
+++ b/harness/timeout.js
@@ -1,6 +1,7 @@
 /**
  * @license
  * Copyright 2018 Google Inc. All rights reserved.
+ * Copyright 2025 Liberty Global B.V.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,8 +49,16 @@ var TimeoutManager = function(logger) {
     var uid = window.setTimeout(
         function() { timeoutHandler(timer.id); }, timeout);
     timer.uid = uid;
+    return timer.id;
   };
 
+  this.clearTimeout = function(id) {
+    if (typeof(timers[id]) != 'undefined') {
+      window.clearTimeout(timers[id].uid);
+      delete timers[id];
+    }
+  }
+
   this.setInterval = function(func, timeout) {
     var interval = getUniqueItem(intervals);
     interval.func = func;
diff --git a/style.css b/style.css
index 79f5cb1..07163f7 100644
--- a/style.css
+++ b/style.css
@@ -17,12 +17,13 @@
 
 body {
   background: #fff;
-  font: normal 0.64em 'Roboto',Sans-Serif;
+  font: normal 0.6em 'Roboto',Sans-Serif;
   margin: 10px 20px 0 20px;
-  width: 1240px;
-  height: 710px;
 }
 
+.bold {
+  font-weight: bold;
+}
 
 .default-list .cell-category {
   display: inline-block;
@@ -87,45 +88,70 @@ body {
   min-width: 56px;
   border-style: solid;
   border-color: #800;
-  border-width: 2px;
-  padding: 0px;
+  border-width: 1px;
+  padding: 0;
   text-align: center;
   font-size: 0.6em;
 }
 
 .test-status-none {
   display: inline-block;
-  min-width: 7px;
+  min-width: 11px;
+  background-color: none;
+  border: 1px solid #fff;
+  border: 1px solid #e0e0e0;
+  border-radius: 5px;
+  padding: 0;
+  margin: 1px 0 0 0;
+}
+
+.test-status-empty {
+  display: inline-block;
+  min-width: 11px;
+  background-color: none;
+  padding: 0;
+  margin: 0;
 }
 
 .default-list .test-status-running {
   display: inline-block;
-  min-width: 5px;
-  background-color: #f0e68c;
-  border: 1px solid #880;
+  min-width: 11px;
+  background-color: #abfcff;
+  border: 1px solid #006ed4;
+  border-radius: 5px;
+  padding: 0;
+  margin: 1px 0 0 0;
 }
 
 .default-list .test-status-fail {
   display: inline-block;
-  min-width: 5px;
-  background-color: #800;
-  border: 1px solid #000;
+  min-width: 11px;
+  background-color: #be0000;
+  border: 1px solid #720000;
+  border-radius: 5px;
+  padding: 0;
+  margin: 1px 0 0 0;
 }
 
 .default-list .test-status-pass {
   display: inline-block;
-  min-width: 5px;
-  background-color: #b5e61d;
-  border: 1px solid #080;
+  min-width: 11px;
+  background-color: #7edf00;
+  border: 1px solid #00a000;
+  border-radius: 5px;
+  padding: 0;
+  margin: 1px 0 0 0;
 }
 
 .default-list .test-status-optional-fail {
   display: inline-block;
-  min-width: 5px;
+  min-width: 11px;
   border-style: solid;
-  border-color: #800;
-  border-width: 2px;
-  padding: 0px;
+  border-color: #fff;
+  border-width: 1px;
+  border-radius: 5px;
+  padding: 0;
+  margin: 1px 0 0 0;
 }
 
 .cell-column {
@@ -167,7 +193,6 @@ div.container_hidden {
 
 .box-right {
   width: 420px;
-  height: 210px;
 }
 
 #testarea {
@@ -184,15 +209,15 @@ div.container_hidden {
 }
 
 #output {
-  height: 200px;
-  width: 502px;
+  height: 250px;
+  width: 600px;
   overflow: hidden;
   color: #369;
   border-width: 1px;
   border-style: solid;
   word-wrap: break-word;
   white-space: pre-wrap;
-  font-size: 1.1em;
+  font-size: 1.0em;
   letter-spacing: 0.2px;
   padding: 2px;
 }
@@ -202,7 +227,8 @@ div.container_hidden {
 }
 
 #controls {
-  display: inline-block;
+  display: block;
+  margin: 5px 0;
 }
 
 #login-pop-up {
@@ -224,7 +250,7 @@ div.container_hidden {
 .step {
   padding-bottom: 2rem;
   font-size: 200%;
-  font-family: roboto-regular;
+  font-family: 'roboto-regular';
   white-space: pre-wrap;
   color: white
 }
@@ -265,7 +291,7 @@ span:focus {
 .focusable {
   color: #0000EE;
   cursor: pointer;
-  text-decoration: underline;
+  text-decoration: none;
 }
 
 #title {
@@ -282,8 +308,13 @@ span:focus {
 }
 
 @keyframes blink {
-  from {background-color: white;}
-  to {background-color: black;}
+  from {
+    background-color: white;
+  }
+
+  to {
+    background-color: black;
+  }
 }
 
 /* Use to activate CSS animation */
@@ -294,33 +325,45 @@ span:focus {
 }
 
 
-@media screen and (min-height: 720px) and (max-height: 721px) {
+@media screen and (min-width: 720px) {
   body {
-    font-size: 0.6em!important;
-    width: 1240px!important;
+    font-size: 0.7em !important;
   }
+
   #output {
-    height: 200px;
-    width: 502px;
+    height: 250px;
+    width: 600px;
   }
+
+  .box-right {
+    width: 420px;
+   }
 }
-@media screen and (min-height: 1080px) and (max-height: 1081px) {
+
+@media screen and (min-width: 1080px) {
   body {
-    font-size: 0.96em!important;
-    width: 1860px!important;
+    font-size: 0.75em !important;
   }
   #output {
-    height: 300px;
+    height: 350px;
     width: 700px;
   }
+
+  .box-right {
+    width: 500px;
+  }
+
 }
-@media screen and (min-height: 2160px) and (max-height: 2161px) {
+@media screen and (min-width: 2160px) {
   body {
-    font-size: 1.92em!important;
-    width: 3720px!important;
+    font-size: 0.85em !important;
   }
   #output {
-    height: 600px;
-    width: 1400px;
+    height: 450px;
+    width: 800px;
   }
+
+  .box-right {
+    width: 600px;
+   }
 }
-- 
2.34.1

